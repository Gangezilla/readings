Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```


This doesn't compile because a borrow of `s` occurs in the assignment to `ref1`, which means that when we try to assign to it later on we get an error.


Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```

I _think_ this won't compile because when that function is finished executing, the Rust compiler won't know when it's appropriate to drop `s`. This means this bit of code is not memory safe and won't compile. Also, more simple, because the borrowed value is not owned we can't do it.



Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```

This doesn't compile because int he assignment to s2 we're moving ownership of that string from the vector to the string. This doesn't make sense because the vector would lose it's element.